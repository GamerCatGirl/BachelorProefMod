package siheynde.bachelorproefmod.datagen;

import net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;
import net.fabricmc.fabric.api.datagen.v1.provider.FabricRecipeProvider;
import net.minecraft.data.server.recipe.RecipeExporter;

public class ModRecipeProvider extends FabricRecipeProvider {
    //private static final List<ItemConvertible> NAME_SMELTABLE = List.of(ModBlocks.NAME2, ModItems.NAME3);
    //NAME can be generated by smelting NAME2 or NAME3 in a furnace
    public ModRecipeProvider(FabricDataOutput output) {
        super(output);
    }

    @Override
    public void generate(RecipeExporter exporter) {
                                              //MISC is a category for recipies where you don't know where it belongs
        //offerSmelting(exporter, NAME_SMELTABLE, RecipeCategory.MISC, ModItems.NAME, 0.7f, 200, "ruby");
        //Blasting is a faster furnace
        //offerBlasting(exporter, NAME_SMELTABLE, RecipeCategory.MISC, ModItems.NAME, 0.7f, 100, "ruby");

        //offerReversibleCompactingRecipes(exporter, RecipeCategory.BUILDING_BLOCKS, ModItems.NAME, RecipeCategory.DECORATIONS, ModBlocks.NAME_BLOCK);
        //example give 9 of name to make NAME_BLOCK ex DIAMAND BLOCK by giving 9 diamonds

        /*
        ShapedRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.NAME, 1)
                .pattern("###")
                .pattern("#S#")
                .pattern("###")
                .input('#', ModItems.NAME2)
                .input('S', Items.STONE)
                .criterion(hasItem(ModItems.NAME2, conditionsFromItem(Items.STONE))) //to unlock the recipe in the book
                .criterion(hasItem(Items.STONE), conditionsFromItem(ModItems.NAME2))
                .offerTo(exporter, new Identifier(getRecipeName(ModItems.NAME)));
         */

    }
}
